/*
 * DamNums: by Xaser Acheron
 *
 * Doom monsters.
 */

// This first monster is well-commented; the rest of the actors have this stuff
// all one-lined for brevity's sake. Hopefully this sort of copy+paste will be
// unnecessary in the future due to some feature or another (C-style macros?)
class DamZombieman : Zombieman replaces Zombieman
{
	// variables are important
	int lastHealth;
	Name lastDamageType;
	Actor lastDamageSource;
	
	// some necessary init stuff.
	override void BeginPlay() {
		super.BeginPlay();
		self.lastHealth = self.health;
	}
	
	// when taking damage, keep a record of the last source of damage (e.g.
	// Who Shot Me) and the type of damage it was.
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) {
		self.lastDamageType = damagetype;
		self.lastDamageSource = source;
		return damage;
	}
	
	// Each tick, check to see if we've accumulated some damage since the last
	// time we've set lastHealth; if so, spawn some super-trendy damage numbers.
	// Note that we can't do this in TakeSpecialDamage above because that gets
	// called multiple times per tick and we only wish to spawn damNums once.
	override void Tick() {
		super.Tick();
		if(self.health < self.lastHealth) {
			DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType);
			self.lastHealth = health;
		}
	}
}

// Welp. Minified Pasta Time.

class DamShotgunGuy       : ShotgunGuy       replaces ShotgunGuy       { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamChaingunGuy      : ChaingunGuy      replaces ChaingunGuy      { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamDoomImp          : DoomImp          replaces DoomImp          { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamDemon            : Demon            replaces Demon            { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamSpectre          : Spectre          replaces Spectre          { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamLostSoul         : LostSoul         replaces LostSoul         { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamCacodemon        : Cacodemon        replaces Cacodemon        { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamHellKnight       : HellKnight       replaces HellKnight       { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamBaronOfHell      : BaronOfHell      replaces BaronOfHell      { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamRevenant         : Revenant         replaces Revenant         { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamFatso            : Fatso            replaces Fatso            { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamArachnotron      : Arachnotron      replaces Arachnotron      { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamPainElemental    : PainElemental    replaces PainElemental    { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamArchvile         : Archvile         replaces Archvile         { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamCyberdemon       : Cyberdemon       replaces Cyberdemon       { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamSpiderMastermind : SpiderMastermind replaces SpiderMastermind { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamWolfensteinSS    : WolfensteinSS    replaces WolfensteinSS    { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
class DamCommanderKeen    : CommanderKeen    replaces CommanderKeen    { int lastHealth; Name lastDamageType; Actor lastDamageSource; override void BeginPlay() { super.BeginPlay(); self.lastHealth = self.health; } override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype) { self.lastDamageType = damagetype; self.lastDamageSource = source; return damage; } override void Tick() { super.Tick(); if(self.health < self.lastHealth) { DamNum.spawnDamageNumbers(self.lastDamageSource, self, self.lastHealth - self.Health, self.lastDamageType); self.lastHealth = health; } } }
